[user]
  name = Rob Stinogle
  email = rstinogle@hirevue.com
# set your user tokens as environment variables, such as ~/.secrets
# # See the README for examples.
[github]
  user = stinoga
  token = 0734ae7403323852ec892bf464447689
[core]
  editor = vim
  excludesfile = ~/.yadr/git/gitignore

[color]
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = green
  changed = yellow
  untracked = cyan

[credential]
  helper = osxkeychain

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  tool = opendiff

[diff]
  tool = opendiff

[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = upstream

[include]
  path = .gitconfig.user

[alias]
  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -v                     # branch (verbose)
  go = checkout -B

  # commit
  c = commit -a                     # commit all
  ca = commit -am                   # commit all with message
  # ca = !git add -A && git commit -avm
  ci = commit                       # commit
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change
  df = diff-tree --no-commit-id --name-only -r #show list of files changed in revision

  # log
  # View the SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph
  # Get my commits
  lm = log --author=\"Rob Stinogle\"
  # Get my commits on one line
  lmo = log --oneline --author=\"Rob Stinogle\"
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  # Grab the commits in the las X days and pretty print the files
  time = "!f() { git log --pretty=format: --name-only --since=\"$1 days ago\"; }; f"

  # pull
  pl = pull                         # pull
  pa = pull --all

  # push
  ps = push                         # push
  psa = push shared --all
  gp = push origin master

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool
  rh = reset --hard

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
